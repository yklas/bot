import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, time
import pytz
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
import json
import os
from typing import List, Dict, TypedDict, Optional

# Configuration
TELEGRAM_TOKEN = "7819420348:AAHElDNd7JI4c5gDbYD7TTe2kAWVn2TVZBo"
TIMEZONE = pytz.timezone('Asia/Almaty')
NOTIFICATIONS_FILE = "user_notifications.json"

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# Data structures
class CustomNotification(TypedDict):
    hour: int
    minute: int
    message: str
    enabled: bool

# Storage
active_users: set[int] = set()
group_ids: set[int] = set()
user_notifications: Dict[int, List[CustomNotification]] = {}

# Updated basic responses
BASIC_RESPONSES = {
    "—Å”ô–ª–µ–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π? üòä",
    "—Å–∞–ª–µ–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π? üòä",
    "“õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞“ª, –∂–∞“õ—Å—ã–º—ã–Ω! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π? üåü",
    "—Ä–∞—Ö–º–µ—Ç": "–ë”ô—Ä–µ–∫–µ–ª–¥—ñ! üôè",
    "–∞—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π? üòä",
    "–Ω–µ –∂–∞“£–∞–ª—ã“õ": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞“ª, –±”ô—Ä—ñ –∂–∞“õ—Å—ã! –°—ñ–∑–¥–µ “õ–∞–Ω–¥–∞–π –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä –±–∞—Ä? üåü",
    "“õ–∞–π—ã—Ä–ª—ã —Ç–∞“£": "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£! –ö“Ø–Ω—ñ“£—ñ–∑ –±–µ—Ä–µ–∫–µ–ª—ñ –±–æ–ª—Å—ã–Ω! ‚ú®",
    "–∂–∞“õ—Å—ã–º—ã–Ω": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞“ª! ”ò—Ä–¥–∞–π—ã–º –∂–∞“õ—Å—ã –±–æ–ª—ã“£—ã–∑! üòä",
    "–±–∞—É—ã—Ä—ã–º": "–ò”ô, —Ç—ã“£–¥–∞–ø —Ç“±—Ä–º—ã–Ω üòä",
    "–∂–∞“õ—Å—ã": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞“ª! üåü",
}

# Notification management functions
def load_notifications():
    """Load custom notifications from file"""
    if os.path.exists(NOTIFICATIONS_FILE):
        try:
            with open(NOTIFICATIONS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"Error loading notifications: {e}")
    return {}

def save_notifications():
    """Save custom notifications to file"""
    try:
        with open(NOTIFICATIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_notifications, f, ensure_ascii=False)
    except Exception as e:
        logger.error(f"Error saving notifications: {e}")

# Initialize scheduler
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

# Command handlers
@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    try:
        chat_id = message.chat.id
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïí –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É", callback_data="manage_notifications")],
            [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
        ])
        
        await message.reply(
            "–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º! üëã\n\n"
            "–ú–µ–Ω —Å—ñ–∑–¥—ñ“£ –∫”©–º–µ–∫—à—ñ“£—ñ–∑–±—ñ–Ω. –ú–µ–Ω –∞—Ä“õ—ã–ª—ã:\n"
            "‚Ä¢ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä “õ–æ—è –∞–ª–∞—Å—ã–∑ üïí\n"
            "‚Ä¢ –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω–µ –∞–ª–∞—Å—ã–∑ üìö\n"
            "‚Ä¢ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä –∂–∞—Å–∞–π –∞–ª–∞—Å—ã–∑ üí™\n\n"
            "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –±–∞—Å—ã–ø, “õ–∞–∂–µ—Ç—Ç—ñ ”ô—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑!",
            reply_markup=keyboard
        )
        
        # Load existing notifications for this user
        if chat_id not in user_notifications:
            user_notifications[chat_id] = []
            save_notifications()
            
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.reply("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "manage_notifications")
async def manage_notifications_handler(callback_query: CallbackQuery):
    """Handle notifications management"""
    try:
        chat_id = callback_query.message.chat.id
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É", callback_data="add_notification")],
            [InlineKeyboardButton(text="üìã –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="list_notifications")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_main")]
        ])
        
        await callback_query.message.edit_text(
            "üïí –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É –º”ô–∑—ñ—Ä—ñ:\n\n"
            "‚Ä¢ –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É “Ø—à—ñ–Ω '‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n"
            "‚Ä¢ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—É “Ø—à—ñ–Ω 'üìã –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logger.error(f"Error in manage_notifications_handler: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "add_notification")
async def add_notification_handler(callback_query: CallbackQuery):
    """Handle adding new notification"""
    try:
        await callback_query.message.edit_text(
            "‚è∞ –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É:\n\n"
            "–ï—Å–∫–µ—Ä—Ç—É–¥—ñ –∫–µ–ª–µ—Å—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\n"
            "12:30 –î”ô—Ä—ñ —ñ—à—É\n\n"
            "–ú—ã—Å–∞–ª—ã:\n"
            "9:00 –¢–∞“£“ì—ã –∂–∞—Ç—Ç—ã“ì—É\n"
            "13:45 –¢“Ø—Å–∫—ñ –∞—Å\n"
            "22:00 “∞–π—ã“õ—Ç–∞—É",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="manage_notifications")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error in add_notification_handler: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.message()
async def handle_notification_input(message: Message):
    """Handle text input for new notifications"""
    try:
        # Check if message format matches time + text
        text = message.text.strip()
        if ' ' in text:
            time_str, *message_parts = text.split(' ')
            if ':' in time_str:
                hour, minute = map(int, time_str.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    notification_text = ' '.join(message_parts)
                    
                    # Add notification
                    chat_id = message.chat.id
                    if chat_id not in user_notifications:
                        user_notifications[chat_id] = []
                    
                    new_notification = {
                        'hour': hour,
                        'minute': minute,
                        'message': notification_text,
                        'enabled': True
                    }
                    
                    user_notifications[chat_id].append(new_notification)
                    save_notifications()
                    
                    # Schedule the notification
                    job_id = f'custom_{chat_id}_{hour}_{minute}'
                    scheduler.add_job(
                        send_notification,
                        'cron',
                        hour=hour,
                        minute=minute,
                        args=[chat_id, notification_text],
                        id=job_id,
                        replace_existing=True
                    )
                    
                    # Confirm addition
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –¢–∞“ì—ã “õ–æ—Å—É", callback_data="add_notification")],
                        [InlineKeyboardButton(text="üìã –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="list_notifications")],
                        [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_to_main")]
                    ])
                    
                    await message.reply(
                        f"‚úÖ –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã!\n\n"
                        f"‚è∞ –£–∞“õ—ã—Ç—ã: {hour:02d}:{minute:02d}\n"
                        f"üìù –•–∞–±–∞—Ä–ª–∞–º–∞: {notification_text}",
                        reply_markup=keyboard
                    )
                    return
                    
        # Handle basic responses if not a notification
        if text.lower() in BASIC_RESPONSES:
            await message.reply(BASIC_RESPONSES[text.lower()])
            
    except Exception as e:
        logger.error(f"Error in handle_notification_input: {e}")
        await message.reply("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

async def send_notification(chat_id: int, message: str):
    """Send scheduled notification"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="list_notifications")]
        ])
        
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –ï—Å–∫–µ—Ä—Ç—É!\n\n{message}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error sending notification to {chat_id}: {e}")

@dp.callback_query(lambda c: c.data == "list_notifications")
async def list_notifications_handler(callback_query: CallbackQuery):
    """Handle listing all notifications"""
    try:
        chat_id = callback_query.message.chat.id
        
        if chat_id not in user_notifications or not user_notifications[chat_id]:
            await callback_query.message.edit_text(
                "üìã –°—ñ–∑–¥–µ ”ô–ª—ñ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∂–æ“õ.\n\n"
                "–ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É “Ø—à—ñ–Ω '‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É", callback_data="add_notification")],
                    [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="manage_notifications")]
                ])
            )
            return
            
        # Sort notifications by time
        notifications = sorted(
            user_notifications[chat_id],
            key=lambda x: (x['hour'], x['minute'])
        )
        
        # Create notification list text
        notifications_text = "üìã –°—ñ–∑–¥—ñ“£ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä—ñ“£—ñ–∑:\n\n"
        for i, notif in enumerate(notifications, 1):
            status = "‚úÖ" if notif['enabled'] else "‚ùå"
            notifications_text += (
                f"{i}. ‚è∞ {notif['hour']:02d}:{notif['minute']:02d} "
                f"{status}\nüìù {notif['message']}\n\n"
            )
        
        # Add buttons for each notification
        keyboard = []
        for i in range(len(notifications)):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå #{i+1} –∂–æ—é",
                    callback_data=f"delete_notification_{i}"
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É", callback_data="add_notification")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="manage_notifications")]
        ])
        
        await callback_query.message.edit_text(
            notifications_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in list_notifications_handler: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data.startswith("delete_notification_"))
async def delete_notification_handler(callback_query: CallbackQuery):
    """Handle notification deletion"""
    try:
        chat_id = callback_query.message.chat.id
        index = int(callback_query.data.split('_')[-1])
        
        if chat_id in user_notifications and 0 <= index < len(user_notifications[chat_id]):
            notification = user_notifications[chat_id][index]
            
            # Remove the scheduled job
            job_id = f'custom_{chat_id}_{notification["hour"]}_{notification["minute"]}'
            scheduler.remove_job(job_id)
            
            # Remove from storage
            user_notifications[chat_id].pop(index)
            save_notifications()
            
            await callback_query.answer("‚úÖ –ï—Å–∫–µ—Ä—Ç—É –∂–æ–π—ã–ª–¥—ã")
            await list_notifications_handler(callback_query)
            
    except Exception as e:
        logger.error(f"Error in delete_notification_handler: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_handler(callback_query: CallbackQuery):
    """Handle back to main menu"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïí –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É", callback_data="manage_notifications")],
            [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
        ])
        
        await callback_query.message.edit_text(
            "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:\n\n"
            "‚Ä¢ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä “õ–æ—é “Ø—à—ñ–Ω 'üïí –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n"
            "‚Ä¢ –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É “Ø—à—ñ–Ω 'üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in back_to_main_handler: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.message(Command('help'))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "ü§ñ –ö”©–º–µ–∫ –º”ô–∑—ñ—Ä—ñ:\n\n"
        "1Ô∏è‚É£ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä “õ–æ—é:\n"
        "   ‚Ä¢ /start –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n"
        "   ‚Ä¢ 'üïí –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É' —Ç–∞“£–¥–∞“£—ã–∑\n"
        "   ‚Ä¢ '‚ûï –ñ–∞“£–∞ –µ—Å–∫–µ—Ä—Ç—É “õ–æ—Å—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n"
        "   ‚Ä¢ –£–∞“õ—ã—Ç –ø–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞–∑—ã“£—ã–∑\n"
        "   –ú—ã—Å–∞–ª—ã: 9:00 –¢–∞“£“ì—ã –∂–∞—Ç—Ç—ã“ì—É\n\n"
        "2Ô∏è‚É£ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä–¥—ñ –∫”©—Ä—É:\n"
        "   ‚Ä¢ 'üìã –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n\n"
        "3Ô∏è‚É£ –ï—Å–∫–µ—Ä—Ç—É–¥—ñ –∂–æ—é:\n"
        "   ‚Ä¢ –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω '‚ùå –ñ–æ—é' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n\n"
        "4Ô∏è‚É£ –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É:\n"
        "   ‚Ä¢ 'üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n\n"
        "‚ùì “ö–æ—Å—ã–º—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–æ–ª—Å–∞, –∞–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_to_main")]
    ])
    
    await message.reply(help_text, reply_markup=keyboard)

# Initialize notifications on startup
async def init_notifications():
    """Initialize all saved notifications on startup"""
    try:
        global user_notifications
        user_notifications = load_notifications()
        
        # Schedule all saved notifications
        for chat_id, notifications in user_notifications.items():
            for notif in notifications:
                if notif['enabled']:
                    job_id = f'custom_{chat_id}_{notif["hour"]}_{notif["minute"]}'
                    scheduler.add_job(
                        send_notification,
                        'cron',
                        hour=notif['hour'],
                        minute=notif['minute'],
                        args=[chat_id, notif['message']],
                        id=job_id,
                        replace_existing=True
                    )
        
        logger.info("Notifications initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing notifications: {e}")

async def shutdown(dispatcher: Dispatcher):
    """Cleanup resources on shutdown"""
    try:
        save_notifications()  # Save notifications before shutdown
        if scheduler.running:
            scheduler.shutdown(wait=True)
        await bot.session.close()
        logger.info("Bot shut down successfully")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

async def main() -> None:
    """Main function to start the bot"""
    try:
        # Initialize notifications
        await init_notifications()
        
        # Start the scheduler
        if not scheduler.running:
            scheduler.start()
        
        # Set up commands
        commands_list = [
            types.BotCommand(command="start", description="–ë–æ—Ç—Ç—ã “õ–æ—Å—É"),
            types.BotCommand(command="help", description="–ö”©–º–µ–∫ –∞–ª—É")
        ]
        await bot.set_my_commands(commands_list)
        
        # Start polling
        logger.info("Bot started successfully")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Critical error in main function: {e}", exc_info=True)
    finally:
        await shutdown(dp)

if __name__ == "__main__":
    asyncio.run(main())
