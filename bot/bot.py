import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
import pytz
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import random
from typing import List, Dict

# Configuration
TELEGRAM_TOKEN = "7819420348:AAHElDNd7JI4c5gDbYD7TTe2kAWVn2TVZBo"
TIMEZONE = pytz.timezone('Asia/Almaty')

# –õ–æ–≥–≥–µ—Ä –±–∞–ø—Ç–∞—É—ã
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∂”ô–Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–¥—ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot=bot)

# –ñ–æ—Å–ø–∞—Ä–ª–∞—É—à—ã
scheduler = AsyncIOScheduler(timezone=TIMEZONE)
scheduler.start()

# –ë–µ–ª—Å–µ–Ω–¥—ñ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä
active_users = set()
group_ids = set()

# English learning content
ENGLISH_QUESTIONS = [
    {
        "id": "1",
        "image_url": "https://m.media-amazon.com/images/I/514nTHwlFnL.jpg",
        "question": "–¢–∞–º–∞“õ —ñ—à–∫–µ–Ω –∫–µ–∑–¥–µ “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Spoon", "Fork", "Knife", "Plate"],
        "correct": "Spoon",
    },
    {
        "id": "2",
        "image_url": "https://www.kitchenstuffplus.com/media/catalog/product/7/3/7398_hauz-stovetop-kettle_230914133830626_ldk9f98hlpmd9nxf.jpg",
        "question": "–ê—Å “Ø–π–¥–µ —Å—É “õ–∞–π–Ω–∞—Ç—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω “õ“±—Ä—ã–ª“ì—ã “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Kettle", "Toaster", "Blender", "Bucket"],
        "correct": "Kettle",
    },
    # ... rest of your questions ...
]

# Basic responses dictionary
BASIC_RESPONSES = {
    "—Å”ô–ª–µ–º": "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å–∞–ª–µ–º": "—Å–∞–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    # ... rest of your responses ...
}

# Scheduled messages
MORNING_MESSAGES = [
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω –µ—Ä–∫–µ–∫—Ç—ñ“£ —ã—Ä—ã—Å—ã –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ —Å”ô—Ç—Ç—ñ ”©—Ç—Å—ñ–Ω! üí™",
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω ”ô–π–µ–ª–¥—ñ“£ –±—ñ—Ä —ñ—Å—ñ –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ –±–µ—Ä–µ–∫–µ–ª—ñ –±–æ–ª—Å—ã–Ω! ‚ú®"
]

NOON_MESSAGE = "üìö –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã –∫–µ–ª–¥—ñ! –ë—ñ–ª—ñ–º - —Ç–∞—É—Å—ã–ª–º–∞—Å “õ–∞–∑—ã–Ω–∞! üìñ"
AFTERNOON_MESSAGE = "üá¨üáß “ö–∞–ª–∞–π, –±–∞—É—ã—Ä—ã–º, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ –∂–∞—Ç—Ç–∞–¥—ã“£ –±–∞? Remember - practice makes perfect! üòä"
EVENING_MESSAGE = "üìù –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã! –ë“Ø–≥—ñ–Ω–≥—ñ –∫“Ø–Ω—ñ“£ –±—ñ–ª—ñ–º–º–µ–Ω ”©—Ç—Ç—ñ–º–∞, ”ô–ª–¥–µ –ø–∞–π–¥–∞—Å—ã–∑ —ñ—Å–ø–µ–Ω ”©—Ç—Ç—ñ–º–∞? Share your progress! üéØ"
SALAUAT_MESSAGE = "–ë“Ø–≥—ñ–Ω–≥—ñ —Å–∞–ª–∞—É–∞—Ç—Ç—ã “±–º—ã—Ç–ø–∞–π—ã“õ! –ê–ª–ª–∞—Ö—É–º–º–∞ —Å–æ–ª–ª–∏ '–∞–ª—è —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥–∏–Ω —É–∞ '–∞–ª—è –∞–ª–∏ —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥"

# Group messages
GROUP_MESSAGES = {
    'morning': [
        "üåÖ “ö–∞–π—ã—Ä–ª—ã —Ç–∞“£, –¥–æ—Å—Ç–∞—Ä!\n–ë“Ø–≥—ñ–Ω –¥–µ –∂–∞“£–∞ –±—ñ–ª—ñ–º –∫“Ø—Ç—ñ–ø —Ç“±—Ä! “ö–∞–Ω–µ, –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª–∞–π—ã“õ! üí™",
        # ... rest of morning messages ...
    ],
    'english': [
        "üá¨üáß –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —É–∞“õ—ã—Ç—ã!\n“ö”ô–Ω–µ, –¥–æ—Å—Ç–∞—Ä, –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä “Ø–π—Ä–µ–Ω–µ–π—ñ–∫! üéØ",
        # ... rest of english messages ...
    ],
    # ... rest of group messages ...
}

# English schedule
english_schedule = [
    {'hour': 9, 'minute': 0},
    {'hour': 15, 'minute': 30},
    {'hour': 17, 'minute': 0},
    {'hour': 21, 'minute': 0}
]

# User progress tracking
user_progress: Dict[int, Dict] = {}

# –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def send_scheduled_message(chat_id: int, message: str):
    """–ñ–æ—Å–ø–∞—Ä–ª–∞–Ω“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    try:
        await bot.send_message(chat_id, message)
        logger.info(f"–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {chat_id}")
    except Exception as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É–¥–µ “õ–∞—Ç–µ: {e}")
        if chat_id in active_users:
            active_users.discard(chat_id)

async def send_english_question(chat_id: int) -> None:
    """Send English learning question to chat"""
    try:
        asked_questions = user_progress.get(chat_id, {}).get("asked_questions", [])
        available_questions = [q for q in ENGLISH_QUESTIONS if q["id"] not in asked_questions]
        
        if not available_questions:
            asked_questions = []
            available_questions = ENGLISH_QUESTIONS
        
        question = random.choice(available_questions)
        
        if chat_id not in user_progress:
            user_progress[chat_id] = {
                "asked_questions": [],
                "current_question": None,
                "correct_answers": 0,
                "questions_answered": 0
            }
        
        user_progress[chat_id]["current_question"] = question
        user_progress[chat_id]["asked_questions"] = asked_questions + [question["id"]]
        
        options_keyboard = []
        for option in question["options"]:
            callback_data = f"answer_{question['id']}_{option}"
            options_keyboard.append([InlineKeyboardButton(text=option, callback_data=callback_data)])
        
        markup = InlineKeyboardMarkup(inline_keyboard=options_keyboard)
        
        try:
            await bot.send_photo(
                chat_id=chat_id,
                photo=question["image_url"],
                caption=f"‚ùì {question['question']}",
                reply_markup=markup
            )
        except Exception as photo_error:
            logger.error(f"Error sending photo: {photo_error}")
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùì {question['question']}",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in send_english_question: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑. /start"
        )

# –£–∞“õ—ã—Ç–ø–µ–Ω –∂–æ—Å–ø–∞—Ä–ª–∞—É
async def schedule_reminders(chat_id: int):
    """–ë–µ–ª–≥—ñ–ª—ñ –±—ñ—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã “Ø—à—ñ–Ω —É–∞“õ—ã—Ç–ø–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –∂–æ—Å–ø–∞—Ä–ª–∞—É."""
    try:
        logger.info(f"–ñ–æ—Å–ø–∞—Ä–ª–∞—É–¥—ã –±–∞—Å—Ç–∞—É: {chat_id}")

        # –ê–ª–¥—ã“£“ì—ã –∂–æ—Å–ø–∞—Ä–ª–∞—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—É
        for job in scheduler.get_jobs():
            if str(chat_id) in job.id:
                scheduler.remove_job(job.id)
        
        # –£–∞“õ—ã—Ç –±–æ–π—ã–Ω—à–∞ –∂–æ—Å–ø–∞—Ä–ª–∞—É
        schedules = [
            {'id': f'morning_{chat_id}', 'time': (7, 0), 'message': random.choice(MORNING_MESSAGES)},
            {'id': f'noon_{chat_id}', 'time': (12, 0), 'message': NOON_MESSAGE},
            {'id': f'afternoon_{chat_id}', 'time': (16, 0), 'message': AFTERNOON_MESSAGE},
            {'id': f'evening_{chat_id}', 'time': (20, 0), 'message': EVENING_MESSAGE},
            {'id': f'salauat_{chat_id}', 'time': (22, 0), 'message': SALAUAT_MESSAGE},
        ]

        # ”ò—Ä–±—ñ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—Å–ø–∞—Ä–ª–∞—É
        for schedule in schedules:
            scheduler.add_job(
                send_scheduled_message,
                trigger=CronTrigger(hour=schedule['time'][0], minute=schedule['time'][1], timezone=TIMEZONE),
                args=[chat_id, schedule['message']],
                id=schedule['id'],
                replace_existing=True
            )
            logger.info(f"–ñ–æ—Å–ø–∞—Ä–ª–∞–Ω“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞: {schedule['id']}")

    except Exception as e:
        logger.error(f"–ñ–æ—Å–ø–∞—Ä–ª–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")

# Command handlers
# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(CommandStart())
async def start_command(message: Message):
    """“ö–æ–ª–¥–∞–Ω—É—à—ã /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑“ì–∞–Ω–¥–∞ –æ—Ä—ã–Ω–¥–∞–ª–∞–¥—ã."""
    chat_id = message.chat.id
    active_users.add(chat_id)
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
    await message.answer("–°”ô–ª–µ–º! –ë“±–ª –±–æ—Ç –∂–æ—Å–ø–∞—Ä–ª–∞–Ω“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂—ñ–±–µ—Ä–µ–¥—ñ.")
    
    # –ñ–æ—Å–ø–∞—Ä–ª–∞—É
    await schedule_reminders(chat_id)

@dp.message(Command('help'))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "ü§ñ *–ú–µ–Ω—ñ“£ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–º:*\n\n"
        "üîπ /start - –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É\n"
        "üîπ /help - –ö”©–º–µ–∫ –∞–ª—É\n"
        "üîπ /schedule - –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∫–µ—Å—Ç–µ—Å—ñ–Ω “õ–∞—Ä–∞—É\n\n"
        "üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω —Ç–∏—ñ—Å—Ç—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.\n"
        "üïò –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∫“Ø–Ω –±–æ–π—ã –±–µ–ª–≥—ñ–ª–µ–Ω–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.\n"
        "‚ùì –ú”ô—Ç—ñ–Ω–¥—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω.\n\n"
        "üì± –¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–ø, –±—ñ–ª—ñ–º—ñ“£—ñ–∑–¥—ñ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—ñ“£—ñ–∑!"
    )
    try:
        keyboard = get_english_menu() if message.chat.type == 'private' else InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]]
        )
        await message.answer(help_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. ")

@dp.message(Command('schedule'))
async def schedule_command(message: Message):
    """Handle /schedule command to show daily schedule"""
    schedule_text = (
        "üìÖ *–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –∫–µ—Å—Ç–µ:*\n\n"
        "üåÖ 07:00 - –¢–∞“£“ì—ã —É”ô–∂\n"
        "üìö 10:00 - –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã\n"
        "üá¨üáß –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å–∞–±–∞“õ—Ç–∞—Ä—ã:\n"
        "   ‚Ä¢ 09:00\n"
        "   ‚Ä¢ 14:35\n"
        "   ‚Ä¢ 17:00\n"
        "   ‚Ä¢ 21:00\n"
        "üìù 20:00 - –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã\n"
        "ü§≤ 22:00 - –°–∞–ª–∞—É–∞—Ç –∞–π—Ç—É\n\n"
        "‚è∞ –ë–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –ê–ª–º–∞—Ç—ã —É–∞“õ—ã—Ç—ã –±–æ–π—ã–Ω—à–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ."
    )
    try:
        await message.answer(schedule_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in schedule_command: {e}")
        await message.answer("–ö–µ—Å—Ç–µ –∫”©—Ä—Å–µ—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã.")

async def send_group_english_activity(chat_id: int):
    """Send English learning activity to group"""
    try:
        message = random.choice(GROUP_MESSAGES['english'])
        question = random.choice(ENGLISH_QUESTIONS)
        
        options_keyboard = []
        for option in question["options"]:
            callback_data = f"group_answer_{question['id']}_{option}"
            options_keyboard.append([InlineKeyboardButton(text=option, callback_data=callback_data)])
        
        markup = InlineKeyboardMarkup(inline_keyboard=options_keyboard)
        
        await bot.send_message(chat_id, message)
        await bot.send_photo(
            chat_id=chat_id,
            photo=question["image_url"],
            caption=f"‚ùì {question['question']}",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in send_group_english_activity: {e}")
        if chat_id in group_ids:
            group_ids.discard(chat_id)

async def schedule_group_activities(chat_id: int):
    """Schedule activities for group chats"""
    try:
        # Morning message
        scheduler.add_job(
            send_scheduled_message,
            trigger=CronTrigger(hour=7, minute=0, timezone=TIMEZONE),
            args=[chat_id, random.choice(GROUP_MESSAGES['morning'])],
            id=f'group_morning_{chat_id}',
            replace_existing=True
        )
        
        # English learning sessions
        for time in english_schedule:
            scheduler.add_job(
                send_group_english_activity,
                trigger=CronTrigger(hour=time['hour'], minute=time['minute'], timezone=TIMEZONE),
                args=[chat_id],
                id=f'group_english_{chat_id}_{time["hour"]}_{time["minute"]}',
                replace_existing=True
            )
        
        logger.info(f"Group activities scheduled for chat {chat_id}")
    except Exception as e:
        logger.error(f"Error scheduling group activities for {chat_id}: {e}")

@dp.callback_query(lambda c: c.data.startswith(('answer_', 'group_answer_')))
async def process_answer(callback_query: CallbackQuery):
    """Process answers for English learning questions"""
    try:
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        is_group = callback_query.data.startswith('group_answer_')
        
        # Extract question ID and selected answer
        parts = callback_query.data.split('_')
        question_id = parts[2] if is_group else parts[1]
        selected_answer = parts[3] if is_group else parts[2]
        
        # Find the correct question
        question = next((q for q in ENGLISH_QUESTIONS if q["id"] == question_id), None)
        if not question:
            await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")
            return
        
        # Check if the answer is correct
        is_correct = selected_answer == question["correct"]
        
        # Update user progress
        if chat_id not in user_progress:
            user_progress[chat_id] = {
                "asked_questions": [],
                "correct_answers": 0,
                "questions_answered": 0
            }
        
        user_progress[chat_id]["questions_answered"] += 1
        if is_correct:
            user_progress[chat_id]["correct_answers"] += 1
        
        # Calculate success rate
        success_rate = (user_progress[chat_id]["correct_answers"] / 
                       user_progress[chat_id]["questions_answered"] * 100)
        
        # Prepare response message
        if is_correct:
            response = f"‚úÖ –î“±—Ä—ã—Å! '{selected_answer}' - –¥“±—Ä—ã—Å –∂–∞—É–∞–ø!\n\n"
        else:
            response = f"‚ùå “ö–∞—Ç–µ! –î“±—Ä—ã—Å –∂–∞—É–∞–ø: '{question['correct']}'\n\n"
        
        response += f"üìä –ñ–µ—Ç—ñ—Å—Ç—ñ–∫: {success_rate:.1f}%"
        
        # Send response
        await callback_query.message.reply(response)
        
        # Send new question after delay
        if not is_group:
            await asyncio.sleep(2)
            await send_english_question(chat_id)
        
    except Exception as e:
        logger.error(f"Error in process_answer: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

def get_english_menu() -> InlineKeyboardMarkup:
    """Create English learning menu keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")],
        [InlineKeyboardButton(text="üìä –ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–º", callback_data="my_progress")]
    ])

@dp.callback_query(lambda c: c.data == "learn_english")
async def start_english_learning(callback_query: CallbackQuery):
    """Start English learning session"""
    try:
        chat_id = callback_query.message.chat.id
        await send_english_question(chat_id)
    except Exception as e:
        logger.error(f"Error in start_english_learning: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "my_progress")
async def show_progress(callback_query: CallbackQuery):
    """Show user's learning progress"""
    try:
        chat_id = callback_query.message.chat.id
        progress = user_progress.get(chat_id, {
            "correct_answers": 0,
            "questions_answered": 0
        })
        
        if progress["questions_answered"] == 0:
            await callback_query.message.reply(
                "üìä –°—ñ–∑ ”ô–ª—ñ —Ç–∞–ø—Å—ã—Ä–º–∞ –æ—Ä—ã–Ω–¥–∞“ì–∞–Ω –∂–æ“õ—Å—ã–∑.\n"
                "–ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É–¥—ñ –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω —Ç–∏—ñ—Å—Ç—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑!",
                reply_markup=get_english_menu()
            )
        else:
            success_rate = (progress["correct_answers"] / 
                          progress["questions_answered"] * 100)
            
            await callback_query.message.reply(
                f"üìä *–°—ñ–∑–¥—ñ“£ –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ“£—ñ–∑:*\n\n"
                f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {progress['correct_answers']}\n"
                f"üìù –ë–∞—Ä–ª—ã“õ –∂–∞—É–∞–ø—Ç–∞—Ä: {progress['questions_answered']}\n"
                f"üéØ –ñ–µ—Ç—ñ—Å—Ç—ñ–∫: {success_rate:.1f}%",
                parse_mode="Markdown",
                reply_markup=get_english_menu()
            )
    except Exception as e:
        logger.error(f"Error in show_progress: {e}")
        await callback_query.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

# –ë–∞—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏—è
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.start()

    while True:
        await asyncio.sleep(1)  # –¶–∏–∫–ª “Ø–∑–¥—ñ–∫—Å—ñ–∑ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É—ñ “Ø—à—ñ–Ω

asyncio.run(main())  # –ù–µ–≥—ñ–∑–≥—ñ —Ü–∏–∫–ª–¥—ñ –¥“±—Ä—ã—Å —ñ—Å–∫–µ “õ–æ—Å—É

if __name__ == "__main__":
    asyncio.run(main())
