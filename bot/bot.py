import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
import pytz
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
from typing import List, Dict

# Configuration
TELEGRAM_TOKEN = "7819420348:AAHElDNd7JI4c5gDbYD7TTe2kAWVn2TVZBo"
TIMEZONE = pytz.timezone('Asia/Almaty')

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# Store active users and group chats
active_users = set()
group_ids = set()

# English learning content
ENGLISH_QUESTIONS = [
    {
        "id": "1",
        "image_url": "https://m.media-amazon.com/images/I/514nTHwlFnL.jpg",
        "question": "–¢–∞–º–∞“õ —ñ—à–∫–µ–Ω –∫–µ–∑–¥–µ “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Spoon", "Fork", "Knife", "Plate"],
        "correct": "Spoon",
    },
    {
        "id": "2",
        "image_url": "https://www.kitchenstuffplus.com/media/catalog/product/7/3/7398_hauz-stovetop-kettle_230914133830626_ldk9f98hlpmd9nxf.jpg",
        "question": "–ê—Å “Ø–π–¥–µ —Å—É “õ–∞–π–Ω–∞—Ç—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω “õ“±—Ä—ã–ª“ì—ã “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Kettle", "Toaster", "Blender", "Bucket"],
        "correct": "Kettle",
    },
    {
        "id": "3",
        "image_url": "https://www.oates.com.au/medias/VC-Prod-Sell-Slot-null?context=bWFzdGVyfHJvb3R8MTg3MjI4fGltYWdlL3BuZ3xhREpoTDJneU1TODVOVE0xTkRJM05ERXhPVGs0TDFaRFgxQnliMlJmVTJWc2JGOVRiRzkwWDI1MWJHd3w3ZmVkZTc0Y2QzMWU4ZjAxMmFiM2NlM2M4NDYxYjY0NzQyNTAyYTM0YjdkNDNiZmFlMjU3N2RiYmU3NWVkYjIw",
        "question": "“Æ–π–¥–µ–≥—ñ –µ–¥–µ–Ω–¥—ñ —Ç–∞–∑–∞–ª–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Mop", "Broom", "Rug", "Bucket"],
        "correct": "Broom",
    },
    {
        "id": "4",
        "image_url": "https://www.thefurnituremarket.co.uk/media/catalog/product/cache/e87de9c08ea8cd93ad1e6aad80c8118c/r/c/rc15-cotswold-rustic-oak-double-wardrobe-1.jpg",
        "question": "–ö–∏—ñ–º–¥–µ—Ä–¥—ñ –∂–∏–Ω–∞–ø, —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Sofa", "Mirror", "Wardrobe", "Table"],
        "correct": "Wardrobe",
    },
       {
        "id": "5",
        "image_url": "https://hips.hearstapps.com/hmg-prod/images/best-washing-machines-6580810397efc.png?crop=0.405xw:0.811xh;0.300xw,0.0962xh&resize=1200:*",
        "question": "–ö–∏—ñ–º–¥—ñ –∂—É—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Vacuum cleaner", "Washing machine", "Iron", "Blender"],
        "correct": "Washing machine",
    },
       {
        "id": "6",
        "image_url": "https://images-cdn.ubuy.co.in/65979c2cb910f53d2e6e34ae-3-5cu-ft-compact-refrigerator-mini.jpg",
        "question": "–¢–∞–º–∞“õ—Ç—ã —Ç–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç–∞ —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Fridge", "Stove", "Dishwasher", "Sink"],
        "correct": "Fridge",
    },
       {
        "id": "7",
        "image_url": "https://wallniture.com/cdn/shop/files/wallniture_forte_lgo420_shelf_bur_woo_lvr_rn_ls_v2_2000x2000_59323fb2-d661-4b66-8d4c-362c39b73901.jpg?v=1718376884&width=2500",
        "question": "–ö—ñ—Ç–∞–ø—Ç–∞—Ä –º–µ–Ω –±–∞—Å“õ–∞ –¥–∞ –∑–∞—Ç—Ç–∞—Ä–¥—ã “õ–æ—é “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –∑–∞—Ç—Ç—ã “õ–∞–ª–∞–π –∞—Ç–∞–π–¥—ã?",
        "options": ["Chair", "Pillow", "Curtain", "Shelf"],
        "correct": "Shelf",
    },
       {
        "id": "8",
        "image_url": "https://www.nilkamalfurniture.com/cdn/shop/files/Mozart_66bfc296-2982-4ee1-883a-50e80a422835_600x.jpg?v=1728031239",
        "question": "–¢“Ø–Ω–¥–µ “±–π—ã“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –∑–∞—Ç—Ç—ã “õ–∞–ª–∞–π –∞—Ç–∞–π–¥—ã?",
        "options": ["Bed", "Carpet", "Drawer", "Door"],
        "correct": "Bed",
    },
       {
        "id": "9",
        "image_url": "https://m.media-amazon.com/images/I/31CPVoKIJmL.jpg",
        "question": "–°—É —ñ—à–µ—Ç—ñ–Ω —ã–¥—ã—Å “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Kettle", "Spoon", "Plate", "Glass"],
        "correct": "Glass",
    },
       {
        "id": "10",
        "image_url": "https://wondershop.sg/media/catalog/product/d/s/dst8020_20_pis_16x9.png?optimize=high&bg-color=255,255,255&fit=bounds&height=700&width=700&canvas=700:700",
        "question": "–ö–∏—ñ–º “Ø—Ç—ñ–∫—Ç–µ—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –∑–∞—Ç –Ω–µ –¥–µ–ø –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Fan", "Toaster", "Iron", "Vaccum cleaner"],
        "correct": "Iron",
    },
]

# User progress tracking
user_progress: Dict[int, Dict] = {}

# Basic responses dictionary
BASIC_RESPONSES = {
    "—Å”ô–ª–µ–º": "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å–∞–ª–µ–º": "—Å–∞–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "“õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Ä–∞—Ö–º–µ—Ç": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üôè",
    "–∞—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! üòä “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π?",
    "–Ω–µ –∂–∞“£–∞–ª—ã“õ": "–∂–∞“£–∞–ª—ã“õ—Ç—ã —é—Ç—É–±—Ç–∞–Ω “õ–∞—Ä–∞—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã üôÉ",
    "“õ–∞–π—ã—Ä–ª—ã —Ç–∞“£": "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£, –±–∞—Ä—à–∞–º—ã–∑“ì–∞ “õ–∞–π—ã—Ä–ª—ã –∫“Ø–Ω –±–æ–ª—Å—ã–Ω! üí´",
    "–Ω–µ–≥–µ": "–±–∞–ª“ì–∞ –º–µ–Ω —à–µ–≥–µ üòÜ",
    "–∂–∞“õ—Å—ã–º—ã–Ω": "–∂–∞“õ—Å—ã –±–æ–ª—Å–∞“£ –º–µ–Ω–¥–µ –∂–∞“õ—Å—ã–º—ã–Ω –∞–π–Ω–∞–ª–∞–π—ã–Ω!üòÖ",
    "—Ç—ã–Ω—ã—à –æ—Ç—ã—Ä": "–∫–∞–∑—ñ—Ä –±–æ—Å –æ—Ç—ã—Ä–∞—Ç—ã–Ω –∑–∞–º–∞–Ω –µ–º–µ—Å üòâ",
    "–±–∞—É—ã—Ä—ã–º": "–±–∞—É—ã—Ä—ã–º —ñ—à—ñ–º–¥–µ–≥—ñ —Ç–∞—É—ñ—Ä—ñ–º –¥–∏—Å–Ω–≥–æ",
    "–ê–∞–∞": "–ê–∞–∞ –¥–µ–º–µ –¢“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –¥–µ",
    "–ê–∞": "–ê–∞ –¥–µ–º–µ –ê–∞–∞ –¥–µ–ø –∞–π—Ç",
    "–∂–∞“õ—Å—ã": "–µ–µ–µ —Å–æ–ª–∞–π –¥–µ",
    "–ö“Ø—à—Ç—ñ": "–ö“Ø—à—Ç—ñ –¥–µ–º–µ –∂–∞“õ—Å—ã –¥–µ",
    "Good morning": "”ò–Ω—ñ, –∞“ì—ã–ª—à—ã–Ω—à–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ –¥–∏–º",
    "üòÇ": "–∫“Ø–ª–º–µ –¥–æ—Å“õ–∞ –∫–µ–ª–µ—Ä –±–∞—Å“õ–∞ –¥–µ–π–¥—ñ üòå",
    "–ú–∞—à–∞–ê–ª–ª–∞“ª": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∏–º–∞–Ω–¥—ã—Å—ã“£ –∞–∞–∞?",
    "–º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã—Ö—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã“õ—Ç—ã –º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
}

# Scheduled messages
MORNING_MESSAGES = [
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω –µ—Ä–∫–µ–∫—Ç—ñ“£ —ã—Ä—ã—Å—ã –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ —Å”ô—Ç—Ç—ñ ”©—Ç—Å—ñ–Ω! üí™",
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω ”ô–π–µ–ª–¥—ñ“£ –±—ñ—Ä —ñ—Å—ñ –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ –±–µ—Ä–µ–∫–µ–ª—ñ –±–æ–ª—Å—ã–Ω! ‚ú®"
]

NOON_MESSAGE = "üìö –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã –∫–µ–ª–¥—ñ! –ë—ñ–ª—ñ–º - —Ç–∞—É—Å—ã–ª–º–∞—Å “õ–∞–∑—ã–Ω–∞! üìñ"
AFTERNOON_MESSAGE = "üá¨üáß “ö–∞–ª–∞–π, –±–∞—É—ã—Ä—ã–º, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ –∂–∞—Ç—Ç–∞–¥—ã“£ –±–∞? Remember - practice makes perfect! üòä"
EVENING_MESSAGE = "üìù –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã! –ë“Ø–≥—ñ–Ω–≥—ñ –∫“Ø–Ω—ñ“£ –±—ñ–ª—ñ–º–º–µ–Ω ”©—Ç—Ç—ñ–º–∞, ”ô–ª–¥–µ –ø–∞–π–¥–∞—Å—ã–∑ —ñ—Å–ø–µ–Ω ”©—Ç—Ç—ñ–º–∞? Share your progress! üéØ"
SALAUAT_MESSAGE = "–ë“Ø–≥—ñ–Ω–≥—ñ —Å–∞–ª–∞—É–∞—Ç—Ç—ã “±–º—ã—Ç–ø–∞–π—ã“õ! –ê–ª–ª–∞—Ö—É–º–º–∞ —Å–æ–ª–ª–∏ '–∞–ª—è —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥–∏–Ω —É–∞ '–∞–ª—è –∞–ª–∏ —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥"

# Initialize scheduler
scheduler = AsyncIOScheduler(timezone=TIMEZONE)
GROUP_CHAT_ID = "-2385835678" 

# Scheduled messages –∂–∞“£–∞—Ä—Ç—É
GROUP_MESSAGES = {
    'morning': [
        "üåÖ “ö–∞–π—ã—Ä–ª—ã —Ç–∞“£, –¥–æ—Å—Ç–∞—Ä!\n–ë“Ø–≥—ñ–Ω –¥–µ –∂–∞“£–∞ –±—ñ–ª—ñ–º –∫“Ø—Ç—ñ–ø —Ç“±—Ä! “ö–∞–Ω–µ, –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª–∞–π—ã“õ! üí™",
        "üåÖ –¢–∞“£ –Ω“±—Ä–ª—ã, –∫”©“£—ñ–ª-–∫“Ø–π –∫”©—Ç–µ—Ä—ñ“£–∫—ñ!\n–ë“Ø–≥—ñ–Ω —Ç–∞“ì—ã –¥–∞ “õ—ã–∑—ã“õ—Ç—ã —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –∫“Ø—Ç—ñ–ø —Ç“±—Ä! üåü",
        "üåÖ –ñ–∞“£–∞ –∫“Ø–Ω - –∂–∞“£–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä!\n–ë—ñ–ª—ñ–º–≥–µ “õ“±—à—Ç–∞—Ä –±–æ–ª–∞–π—ã“õ! üìö"
    ],
    'english': [
        "üá¨üáß –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —É–∞“õ—ã—Ç—ã!\n“ö”ô–Ω–µ, –¥–æ—Å—Ç–∞—Ä, –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä “Ø–π—Ä–µ–Ω–µ–π—ñ–∫! üéØ",
        "üá¨üáß English Time!\n–ë“Ø–≥—ñ–Ω–≥—ñ –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ “Ø–π—Ä–µ–Ω—É–≥–µ –¥–∞–π—ã–Ω—Å—ã–∑–¥–∞—Ä –º–∞? üìù",
        "üá¨üáß Let's learn English!\n–ñ–∞“£–∞ —Å”©–∑–¥–µ—Ä –º–µ–Ω —Å”©–∑ —Ç—ñ—Ä–∫–µ—Å—Ç–µ—Ä—ñ–Ω “Ø–π—Ä–µ–Ω–µ—Ç—ñ–Ω —É–∞“õ—ã—Ç –∫–µ–ª–¥—ñ! üéì"
    ],
    'activity': [
        "üéØ –ë–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–∫ —É–∞“õ—ã—Ç—ã!\n–¢–æ–ø—Ç–∞ –∫—ñ–º –±–∞—Ä? “ö–∞–Ω–¥–∞–π –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä –±–∞—Ä? üòä",
        "üí´ –î–æ—Å—Ç–∞—Ä, “õ–∞–ª–∞–π—Å—ã–∑–¥–∞—Ä?\n–ë“Ø–≥—ñ–Ω “õ–∞–Ω–¥–∞–π –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä–≥–µ –∂–µ—Ç—Ç—ñ“£—ñ–∑–¥–µ—Ä? üåü",
        "üéâ –¢–æ–ø –±–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä–∞—Ç—ã–Ω —É–∞“õ—ã—Ç!\n–ë—ñ—Ä-–±—ñ—Ä—ñ–º—ñ–∑–≥–µ “õ–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç–µ–π—ñ–∫! üí™"
    ],
    'book': [
        "üìö –ö—ñ—Ç–∞–ø –æ“õ—ã–ø –∂–∞—Ç—Å—ã“£–¥–∞—Ä –º–∞? –ë“Ø–≥—ñ–Ω “õ–∞–Ω–¥–∞–π –∫—ñ—Ç–∞–ø –æ“õ—ã–ø –∂–∞—Ç—ã—Ä—Å—ã–∑–¥–∞—Ä? üìñ",
        "üìö –ö—ñ—Ç–∞–ø - –±—ñ–ª—ñ–º –±“±–ª–∞“ì—ã! –ö“Ø–Ω–¥–µ 20 –º–∏–Ω—É—Ç –æ“õ—É –∞—Ä“õ—ã–ª—ã –∫”©–ø –±—ñ–ª—ñ–º –∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã! üìö",
        "üìö –î–æ—Å—Ç–∞—Ä, –±“Ø–≥—ñ–Ω “õ–∞–Ω–¥–∞–π –ø–∞–π–¥–∞–ª—ã –∫—ñ—Ç–∞–ø –æ“õ—ã–ø –∂–∞—Ç—ã—Ä—Å—ã–∑–¥–∞—Ä? –ë”©–ª—ñ—Å—ñ“£—ñ–∑–¥–µ—Ä! üìñ"
    ]
}

async def send_group_english_activity(chat_id: int):
    """Send interactive English activity to group"""
    try:
        # –ñ–∞“£–∞ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
        intro_message = random.choice(GROUP_MESSAGES['english'])
        await bot.send_message(chat_id, intro_message)
        await asyncio.sleep(2)  # –ö—ñ—à–∫–µ–Ω–µ “Ø–∑—ñ–ª—ñ—Å
        await send_english_question(chat_id)
    except Exception as e:
        logger.error(f"Error sending group English activity: {e}")

async def send_group_activity_prompt(chat_id: int):
    """Send activity prompt to group"""
    try:
        message = random.choice(GROUP_MESSAGES['activity'])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")],
            [InlineKeyboardButton(text="üí≠ –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É", callback_data="leave_feedback")]
        ])
        await bot.send_message(chat_id, message, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error sending group activity prompt: {e}")

async def send_book_reminder(chat_id: int):
    """Send book reading reminder"""
    try:
        message = random.choice(GROUP_MESSAGES['book'])
        await bot.send_message(chat_id, message)
    except Exception as e:
        logger.error(f"Error sending book reminder: {e}")

# –°–∞“ì–∞—Ç –ø–µ–Ω –º–∏–Ω—É—Ç—Ç—ã –∂–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω —É–∞“õ—ã—Ç—Ç–∞—Ä“ì–∞ —Å”ô–π–∫–µ—Å —Ä–µ—Ç—Ç–µ—É
english_schedule = [
    {'hour': 9, 'minute': 00},
    {'hour': 13, 'minute': 30},
    {'hour': 17, 'minute': 00},
    {'hour': 21, 'minute': 00}
]

async def schedule_group_activities(chat_id: int):
    """Schedule group-specific activities"""
    try:
        # –¢–∞“£“ì—ã —Å”ô–ª–µ–º–¥–µ—Å—É - 7:00
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=7,
            minute=0,
            args=[chat_id, random.choice(GROUP_MESSAGES['morning'])],
            id=f'group_morning_{chat_id}',
            replace_existing=True
        )

        # –ö—ñ—Ç–∞–ø –æ“õ—É –µ—Å–∫–µ—Ä—Ç—É—ñ - 10:00
        scheduler.add_job(
            send_book_reminder,
            'cron',
            hour=10,
            minute=0,
            args=[chat_id],
            id=f'group_book_{chat_id}',
            replace_existing=True
        )

        # –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –±–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–∫—Ç–µ—Ä—ñ - 16:00
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=16, 
            minute=0,
            args=[chat_id, AFTERNOON_MESSAGE],
            id=f'group_afternoon_{chat_id}',
            replace_existing=True
        )

        # –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã - 20:00
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=20,
            minute=0,
            args=[chat_id, EVENING_MESSAGE],
            id=f'group_evening_{chat_id}',
            replace_existing=True
        )

        # –°–∞–ª–∞—É–∞—Ç –µ—Å–∫–µ—Ä—Ç—É—ñ - 22:00
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=22,
            minute=0,
            args=[chat_id, SALAUAT_MESSAGE],
            id=f'group_salauat_{chat_id}',
            replace_existing=True
        )

        # –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –±–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–∫—Ç–µ—Ä—ñ
        for schedule in english_schedule:
            scheduler.add_job(
                send_group_english_activity,
                'cron',
                hour=schedule['hour'],
                minute=schedule['minute'],
                args=[chat_id],
                id=f'group_english_{schedule["hour"]}_{schedule["minute"]}_{chat_id}',
                replace_existing=True
            )

        logger.info(f"Group activities scheduled for chat {chat_id}")
    except Exception as e:
        logger.error(f"Error scheduling group activities: {e}")

def get_english_menu() -> InlineKeyboardMarkup:
    """Create main menu keyboard"""
    keyboard = [
        [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")],
        [InlineKeyboardButton(text="üìä –ú–µ–Ω—ñ“£ –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–º", callback_data="my_progress")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_english_question(chat_id: int) -> None:
    """Send English learning question to chat"""
    try:
        # Get previously asked questions for this chat
        asked_questions = user_progress.get(chat_id, {}).get("asked_questions", [])
        
        # Filter out questions that haven't been asked yet
        available_questions = [q for q in ENGLISH_QUESTIONS if q["id"] not in asked_questions]
        
        # If all questions have been asked, reset the list
        if not available_questions:
            asked_questions = []
            available_questions = ENGLISH_QUESTIONS
        
        # Select a random question
        question = random.choice(available_questions)
        
        # Initialize or update user progress
        if chat_id not in user_progress:
            user_progress[chat_id] = {
                "asked_questions": [],
                "current_question": None,
                "correct_answers": 0,
                "questions_answered": 0
            }
        
        # Update current question and asked questions
        user_progress[chat_id]["current_question"] = question
        user_progress[chat_id]["asked_questions"] = asked_questions + [question["id"]]
        
        # Create keyboard with options
        options_keyboard = []
        for option in question["options"]:
            callback_data = f"answer_{question['id']}_{option}"
            options_keyboard.append([InlineKeyboardButton(text=option, callback_data=callback_data)])
        
        markup = InlineKeyboardMarkup(inline_keyboard=options_keyboard)
        
        try:
            await bot.send_photo(
                chat_id=chat_id,
                photo=question["image_url"],
                caption=f"‚ùì {question['question']}",
                reply_markup=markup
            )
            logger.info(f"Question {question['id']} sent successfully to chat {chat_id}")
        except Exception as photo_error:
            logger.error(f"Error sending photo: {photo_error}")
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùì {question['question']}",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in send_english_question: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑. /start"
        )

@dp.callback_query(lambda c: c.data == "learn_english")
async def start_learning(callback_query: CallbackQuery):
    """Handle learn English button"""
    try:
        chat_id = callback_query.message.chat.id
        await callback_query.answer()
        await send_english_question(chat_id)
    except Exception as e:
        logger.error(f"Error in start_learning: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def process_answer(callback_query: CallbackQuery):
    """Handle answer selection"""
    try:
        chat_id = callback_query.message.chat.id
        _, question_id, selected_answer = callback_query.data.split("_")
        
        # Initialize progress if not exists
        if chat_id not in user_progress:
            user_progress[chat_id] = {
                "asked_questions": [],
                "current_question": None,
                "correct_answers": 0,
                "questions_answered": 0,
                "last_question_message": None  # Add this to track the last question message
            }
        
        current_question = user_progress[chat_id].get("current_question")
        
        if current_question and current_question["id"] == question_id:
            # Remove the old keyboard
            await callback_query.message.edit_reply_markup(reply_markup=None)
            
            # Store result message for later deletion
            if selected_answer == current_question["correct"]:
                user_progress[chat_id]["correct_answers"] += 1
                result_message = await callback_query.message.reply("üéâ –î“±—Ä—ã—Å! / Correct!")
            else:
                result_message = await callback_query.message.reply(
                    f"‚ùå “ö–∞—Ç–µ! –î“±—Ä—ã—Å –∂–∞—É–∞–ø: {current_question['correct']}"
                )
            
            user_progress[chat_id]["questions_answered"] += 1
            
            # Send result message with next question button
            result_text = (
                f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {user_progress[chat_id]['correct_answers']}\n"
                f"üìù –ë–∞—Ä–ª—ã“õ –∂–∞—É–∞–ø—Ç–∞—Ä: {user_progress[chat_id]['questions_answered']}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ", callback_data="next_question")],
                [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="main_menu")]
            ])
            
            status_message = await callback_query.message.reply(result_text, reply_markup=keyboard)
            
            # Store messages to be deleted when moving to next question
            user_progress[chat_id]["last_question_message"] = {
                "question": callback_query.message,
                "result": result_message,
                "status": status_message
            }
        
    except Exception as e:
        logger.error(f"Error in process_answer: {e}")
        await callback_query.message.reply("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "next_question")
async def next_question(callback_query: CallbackQuery):
    """Handle next question button"""
    try:
        await callback_query.answer()
        chat_id = callback_query.message.chat.id
        
        # Delete previous messages if they exist
        if chat_id in user_progress and user_progress[chat_id].get("last_question_message"):
            last_messages = user_progress[chat_id]["last_question_message"]
            try:
                # Delete previous question, result, and status messages
                await last_messages["question"].delete()
                await last_messages["result"].delete()
                await last_messages["status"].delete()
            except Exception as delete_error:
                logger.error(f"Error deleting messages: {delete_error}")
            
            # Clear the stored messages
            user_progress[chat_id]["last_question_message"] = None
        
        # Send new question
        await send_english_question(chat_id)
        
    except Exception as e:
        logger.error(f"Error in next_question: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "my_progress")
async def show_progress(callback_query: CallbackQuery):
    """Show user's learning progress"""
    try:
        chat_id = callback_query.message.chat.id
        
        if chat_id in user_progress:
            correct = user_progress[chat_id].get("correct_answers", 0)
            total = user_progress[chat_id].get("questions_answered", 0)
            percentage = (correct / total * 100) if total > 0 else 0
            
            progress_text = (
                f"üìä –°—ñ–∑–¥—ñ“£ –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ“£—ñ–∑:\n\n"
                f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {correct}\n"
                f"üìù –ë–∞—Ä–ª—ã“õ –∂–∞—É–∞–ø—Ç–∞—Ä: {total}\n"
                f"üìà –ü–∞–π—ã–∑–¥—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à: {percentage:.1f}%"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="main_menu")]
            ])
            
            await callback_query.message.answer(progress_text, reply_markup=keyboard)
        else:
            await callback_query.answer(
                "–°—ñ–∑ ”ô–ª—ñ —Ç–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä“ì–∞–Ω –∂–æ“õ—Å—ã–∑.\n"
                "You haven't taken any tests yet."
            )
    except Exception as e:
        logger.error(f"Error in show_progress: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

async def send_scheduled_message(chat_id: int, message: str):
    """Send scheduled message to user or group"""
    try:
        # Get appropriate keyboard based on chat type
        keyboard = get_english_menu() if chat_id not in group_ids else None
        await bot.send_message(chat_id, message, reply_markup=keyboard)
        logger.info(f"Scheduled message sent to {chat_id}")
    except Exception as e:
        logger.error(f"Error sending scheduled message to {chat_id}: {e}")
        if chat_id in active_users:
            active_users.discard(chat_id)
        if chat_id in group_ids:
            group_ids.discard(chat_id)

async def morning_reminder(chat_id: int):
    """Send morning reminder"""
    message = random.choice(MORNING_MESSAGES)
    await send_scheduled_message(chat_id, message)

async def schedule_reminders(chat_id: int):
    """Schedule all reminders for a user or group"""
    try:
        logger.info(f"Scheduling reminders for chat {chat_id}")
        
        # –ê–ª–¥—ã–º–µ–Ω –æ—Å—ã —á–∞—Ç “Ø—à—ñ–Ω –±–∞—Ä —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã ”©—à—ñ—Ä–µ–º—ñ–∑
        for job in scheduler.get_jobs():
            if str(chat_id) in job.id:
                scheduler.remove_job(job.id)
        
        # –¢–∞“£“ì—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=7,
            minute=0,
            args=[chat_id, random.choice(MORNING_MESSAGES)],
            id=f'morning_{chat_id}',
            replace_existing=True
        )
        
        # –¢“Ø—Å–∫—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=10,
            minute=0,
            args=[chat_id, NOON_MESSAGE],
            id=f'noon_{chat_id}',
            replace_existing=True
        )
        
        # –¢“Ø—Å—Ç–µ–Ω –∫–µ–π—ñ–Ω–≥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=16,
            minute=0,
            args=[chat_id, AFTERNOON_MESSAGE],
            id=f'afternoon_{chat_id}',
            replace_existing=True
        )
        
        # –ö–µ—à–∫—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=20,
            minute=0,
            args=[chat_id, EVENING_MESSAGE],
            id=f'evening_{chat_id}',
            replace_existing=True
        )
        
        # –°–∞–ª–∞—É–∞—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=22,
            minute=0,
            args=[chat_id, SALAUAT_MESSAGE],
            id=f'salauat_{chat_id}',
            replace_existing=True
        )
        
        logger.info(f"Successfully scheduled all reminders for chat {chat_id}")
        logger.info(f"Current jobs for chat {chat_id}: {[job.id for job in scheduler.get_jobs() if str(chat_id) in job.id]}")
        
    except Exception as e:
        logger.error(f"Error scheduling reminders for {chat_id}: {e}")

# –ñ–∞“£–∞ callback handler “õ–æ—Å—É
@dp.callback_query(lambda c: c.data == "leave_feedback")
async def handle_feedback(callback_query: CallbackQuery):
    """Handle feedback button press"""
    try:
        await callback_query.answer()
        await callback_query.message.reply(
            "üí≠ –¢–æ–ø—Ç—ã –∂–∞“õ—Å–∞—Ä—Ç—É “Ø—à—ñ–Ω –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑!\n"
            "“ö–∞–Ω–¥–∞–π —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã? “ö–∞–Ω–¥–∞–π –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä “õ–æ—Å“õ—ã–º—ã–∑ –∫–µ–ª–µ–¥—ñ?"
        )
    except Exception as e:
        logger.error(f"Error handling feedback: {e}")

# start_command —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω –∂–∞“£–∞—Ä—Ç—É
@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type in ['group', 'supergroup']:
            group_ids.add(chat_id)
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã
            group_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
            ])
            await message.reply(
                "–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º, —Ç–æ–ø –º“Ø—à–µ–ª–µ—Ä—ñ! üëã\n\n"
                "–ú–µ–Ω —Å—ñ–∑–¥–µ—Ä–¥—ñ“£ –∫”©–º–µ–∫—à—ñ–ª–µ—Ä—ñ“£—ñ–∑–±—ñ–Ω!\n"
                "üéØ –ú–µ–Ω—ñ“£ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–º:\n"
                "- –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å–∞–±–∞“õ—Ç–∞—Ä—ã\n"
                "- –¢–æ–ø –±–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä—É\n"
                "- “ö—ã–∑—ã“õ—Ç—ã —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä\n"
                "- –ü–∞–π–¥–∞–ª—ã –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä\n\n"
                "–¢–æ–ø—Ç–∞ –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª—ã“£—ã–∑–¥–∞—Ä! üåü",
                reply_markup=group_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã
            )
            # –¢–æ–ø “Ø—à—ñ–Ω –∞—Ä–Ω–∞–π—ã –∂–æ—Å–ø–∞—Ä–ª–∞—É
            await schedule_group_activities(chat_id)
        else:
            # –ñ–µ–∫–µ —á–∞—Ç “Ø—à—ñ–Ω –±“±—Ä—ã–Ω“ì—ã –∫–æ–¥
            active_users.add(chat_id)
            await message.reply(
                "–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º! üëã\n"
                "–ú–µ–Ω —Å—ñ–∑–¥—ñ“£ –∫”©–º–µ–∫—à—ñ“£—ñ–∑–±—ñ–Ω. –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ø, "
                "–∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∂–∞—Å–∞–π–º—ã–Ω!\n\n"
                "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –±–∞—Å—ã–ø, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω–µ –∞–ª–∞—Å—ã–∑!",
                reply_markup=get_english_menu()
            )
            await schedule_reminders(chat_id)
            
        logger.info(f"Bot started in chat: {chat_id}")
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.reply("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")
@dp.message()
async def handle_messages(message: Message):
    """Handle all incoming messages"""
    try:
        text = message.text.lower() if message.text else ""
        if text in BASIC_RESPONSES:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            if message.chat.type == 'private':
                keyboard = get_english_menu()
            else:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
                ])
            await message.answer(BASIC_RESPONSES[text], reply_markup=keyboard)
            
        # Add user to active users if it's a private chat
        if message.chat.type == 'private':
            active_users.add(message.chat.id)
        # Add group to groups list if it's a group chat
        elif message.chat.type in ['group', 'supergroup']:
            group_ids.add(message.chat.id)
            
    except Exception as e:
        logger.error(f"Error in handle_messages: {e}")

async def main() -> None:
    try:
        # Scheduler-–¥—ñ –∞–ª–¥—ã–º–µ–Ω —ñ—Å–∫–µ “õ–æ—Å–∞–º—ã–∑
        scheduler.start()
        logger.info("Scheduler started successfully")
        
        # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –æ—Ä–Ω–∞—Ç—É
        commands_list = [
            types.BotCommand(command="start", description="–ë–∞—Å—Ç–∞—É / Start the bot"),
            types.BotCommand(command="help", description="–ö”©–º–µ–∫ / Help information"),
            types.BotCommand(command="schedule", description="–ö–µ—Å—Ç–µ / Show schedule"),
        ]
        await bot.set_my_commands(commands_list)
        
        # Polling-—Ç—ñ –±–∞—Å—Ç–∞—É
        logger.info("Starting bot polling...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"Error in main function: {e}")
        raise
    finally:
        scheduler.shutdown()
        await bot.session.close()
@dp.message(Command('help'))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "ü§ñ *–ú–µ–Ω—ñ“£ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–º:*\n\n"
        "üîπ /start - –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É\n"
        "üîπ /help - –ö”©–º–µ–∫ –∞–ª—É\n"
        "üîπ /schedule - –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∫–µ—Å—Ç–µ—Å—ñ–Ω “õ–∞—Ä–∞—É\n\n"
        "üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω —Ç–∏—ñ—Å—Ç—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.\n"
        "üïò –ï—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∫“Ø–Ω –±–æ–π—ã –±–µ–ª–≥—ñ–ª–µ–Ω–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.\n"
        "‚ùì –ú”ô—Ç—ñ–Ω–¥—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω.\n\n"
        "üì± –¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–ø, –±—ñ–ª—ñ–º—ñ“£—ñ–∑–¥—ñ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—ñ“£—ñ–∑!"
    )
    try:
        # Create appropriate keyboard based on chat type
        if message.chat.type == 'private':
            keyboard = get_english_menu()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
            ])
            
        await message.answer(help_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.message(Command('schedule'))
async def schedule_command(message: Message):
    """Handle /schedule command"""
    schedule_text = (
        "üìÖ *–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∫–µ—Å—Ç–µ—Å—ñ:*\n\n"
        "üåÖ 07:00 - –¢–∞“£“ì—ã –µ—Å–∫–µ—Ä—Ç—É\n"
        "üìö 10:00 - –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã\n"
        "üá¨üáß 13:00 - –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å–∞–±–∞“ì—ã\n"
        "üá¨üáß 16:00 - –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å–∞–±–∞“ì—ã\n"
        "üá¨üáß 17:00 - –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å–∞–±–∞“ì—ã\n"
        "üìù 20:00 - –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã\n"
        "ü§≤ 22:00 - –°–∞–ª–∞—É–∞—Ç\n\n"
        "üîÑ –ë–∞—Ä–ª—ã“õ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä *–∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ* –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ."
    )
    try:
        # Create appropriate keyboard based on chat type
        if message.chat.type == 'private':
            keyboard = get_english_menu()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")]
            ])
            
        await message.answer(schedule_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in schedule_command: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

# Ensure the bot is run only if this script is executed directly
if __name__ == "__main__":
    asyncio.run(main())
