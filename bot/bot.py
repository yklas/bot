import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
import pytz
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
from typing import List, Dict

# Configuration
TELEGRAM_TOKEN = "7819420348:AAHElDNd7JI4c5gDbYD7TTe2kAWVn2TVZBo"
TIMEZONE = pytz.timezone('Asia/Almaty')

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# English learning content
ENGLISH_QUESTIONS = [
    {
        "id": "1",
        "image_url": "https://m.media-amazon.com/images/I/514nTHwlFnL.jpg",
        "question": "–¢–∞–º–∞“õ —ñ—à–∫–µ–Ω –∫–µ–∑–¥–µ “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Spoon", "Fork", "Knife", "Plate"],
        "correct": "Spoon",
    },
    {
        "id": "2",
        "image_url": "https://www.kitchenstuffplus.com/media/catalog/product/7/3/7398_hauz-stovetop-kettle_230914133830626_ldk9f98hlpmd9nxf.jpg",
        "question": "–ê—Å “Ø–π–¥–µ —Å—É “õ–∞–π–Ω–∞—Ç—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω “õ“±—Ä—ã–ª“ì—ã “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Kettle", "Toaster", "Blender", "Bucket"],
        "correct": "Kettle",
    },
    {
        "id": "3",
        "image_url": "https://www.oates.com.au/medias/VC-Prod-Sell-Slot-null",
        "question": "“Æ–π–¥–µ–≥—ñ –µ–¥–µ–Ω–¥—ñ —Ç–∞–∑–∞–ª–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Mop", "Broom", "Rug", "Bucket"],
        "correct": "Broom",
    },
    {
        "id": "4",
        "image_url": "https://www.thefurnituremarket.co.uk/media/catalog/product/cache/e87de9c08ea8cd93ad1e6aad80c8118c/r/c/rc15-cotswold-rustic-oak-double-wardrobe-1.jpg",
        "question": "–ö–∏—ñ–º–¥–µ—Ä–¥—ñ –∂–∏–Ω–∞–ø, —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞—Ç—ã–Ω –±“±–ª –∑–∞—Ç “õ–∞–ª–∞–π –∞—Ç–∞–ª–∞–¥—ã?",
        "options": ["Sofa", "Mirror", "Wardrobe", "Table"],
        "correct": "Wardrobe",
    }
]

# User progress tracking
user_progress: Dict[int, Dict] = {}

# Store active users
active_users = set()

# Initialize scheduler
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

# Basic responses dictionary
BASIC_RESPONSES = {
    "—Å”ô–ª–µ–º": "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å–∞–ª–µ–º": "—Å–∞–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "“õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Ä–∞—Ö–º–µ—Ç": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üôè",
    "–∞—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! üòä “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π?",
    "–Ω–µ –∂–∞“£–∞–ª—ã“õ": "–∂–∞“£–∞–ª—ã“õ—Ç—ã —é—Ç—É–±—Ç–∞–Ω “õ–∞—Ä–∞—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã üôÉ",
    "“õ–∞–π—ã—Ä–ª—ã —Ç–∞“£": "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£, –±–∞—Ä—à–∞–º—ã–∑“ì–∞ “õ–∞–π—ã—Ä–ª—ã –∫“Ø–Ω –±–æ–ª—Å—ã–Ω! üí´",
    "–Ω–µ–≥–µ": "–±–∞–ª“ì–∞ –º–µ–Ω —à–µ–≥–µ üòÜ",
    "–∂–∞“õ—Å—ã–º—ã–Ω": "–∂–∞“õ—Å—ã –±–æ–ª—Å–∞“£ –º–µ–Ω–¥–µ –∂–∞“õ—Å—ã–º—ã–Ω –∞–π–Ω–∞–ª–∞–π—ã–Ω!üòÖ",
    "—Ç—ã–Ω—ã—à –æ—Ç—ã—Ä": "–∫–∞–∑—ñ—Ä –±–æ—Å –æ—Ç—ã—Ä–∞—Ç—ã–Ω –∑–∞–º–∞–Ω –µ–º–µ—Å üòâ",
    "–±–∞—É—ã—Ä—ã–º": "–±–∞—É—ã—Ä—ã–º —ñ—à—ñ–º–¥–µ–≥—ñ —Ç–∞—É—ñ—Ä—ñ–º –¥–∏—Å–Ω–≥–æ",
    "–ê–∞–∞": "–ê–∞–∞ –¥–µ–º–µ –¢“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –¥–µ",
    "–ê–∞": "–ê–∞ –¥–µ–º–µ –ê–∞–∞ –¥–µ–ø –∞–π—Ç",
    "–∂–∞“õ—Å—ã": "–µ–µ–µ —Å–æ–ª–∞–π –¥–µ",
    "–ö“Ø—à—Ç—ñ": "–ö“Ø—à—Ç—ñ –¥–µ–º–µ –∂–∞“õ—Å—ã –¥–µ",
    "Good morning": "”ò–Ω—ñ, –∞“ì—ã–ª—à—ã–Ω—à–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ –¥–∏–º",
    "üòÇ": "–∫“Ø–ª–º–µ –¥–æ—Å“õ–∞ –∫–µ–ª–µ—Ä –±–∞—Å“õ–∞ –¥–µ–π–¥—ñ üòå",
    "–ú–∞—à–∞–ê–ª–ª–∞“ª": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∏–º–∞–Ω–¥—ã—Å—ã“£ –∞–∞–∞?",
    "–º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã—Ö—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã“õ—Ç—ã –º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
}

# Scheduled messages
MORNING_MESSAGES = [
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω –µ—Ä–∫–µ–∫—Ç—ñ“£ —ã—Ä—ã—Å—ã –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ —Å”ô—Ç—Ç—ñ ”©—Ç—Å—ñ–Ω! üí™",
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω ”ô–π–µ–ª–¥—ñ“£ –±—ñ—Ä —ñ—Å—ñ –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ –±–µ—Ä–µ–∫–µ–ª—ñ –±–æ–ª—Å—ã–Ω! ‚ú®"
]

NOON_MESSAGE = "üìö –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã –∫–µ–ª–¥—ñ! –ë—ñ–ª—ñ–º - —Ç–∞—É—Å—ã–ª–º–∞—Å “õ–∞–∑—ã–Ω–∞! üìñ"
AFTERNOON_MESSAGE = "üá¨üáß “ö–∞–ª–∞–π, –±–∞—É—ã—Ä—ã–º, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ –∂–∞—Ç—Ç–∞–¥—ã“£ –±–∞? Remember - practice makes perfect! üòä"
EVENING_MESSAGE = "üìù –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã! –ë“Ø–≥—ñ–Ω–≥—ñ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–ø –±—ñ—Ç—ñ—Ä–¥—ñ“£ –±–µ? Share your progress! üéØ"
SALAUAT_MESSAGE = "–ë“Ø–≥—ñ–Ω–≥—ñ —Å–∞–ª–∞—É–∞—Ç—Ç—ã “±–º—ã—Ç–ø–∞–π—ã“õ! –ê–ª–ª–∞—Ö—É–º–º–∞ —Å–æ–ª–ª–∏ '–∞–ª—è —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥–∏–Ω —É–∞ '–∞–ª—è –∞–ª–∏ —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥"

async def send_english_question(chat_id: int) -> None:
    """Send a random English question to user"""
    try:
        # Initialize user progress if not exists
        if chat_id not in user_progress:
            user_progress[chat_id] = {
                "correct_answers": 0,
                "questions_answered": 0,
                "current_question": None
            }
        
        # Select a random question
        question = random.choice(ENGLISH_QUESTIONS)
        logger.info(f"Selected question: {question['id']}")
        
        # Create options keyboard
        options_keyboard = []
        for option in question["options"]:
            callback_data = f"answer_{question['id']}_{option}"
            options_keyboard.append([
                InlineKeyboardButton(text=option, callback_data=callback_data)
            ])
        
        # Add "Back to Menu" button
        options_keyboard.append([
            InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="main_menu")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=options_keyboard)
        
        # Store current question for user
        user_progress[chat_id]["current_question"] = question
        
        try:
            # Send question with image
            await bot.send_photo(
                chat_id=chat_id,
                photo=question["image_url"],
                caption=f"‚ùì {question['question']}",
                reply_markup=markup
            )
            logger.info(f"Question sent successfully to user {chat_id}")
        except Exception as photo_error:
            logger.error(f"Error sending photo: {photo_error}")
            # If photo fails, send without photo
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùì {question['question']}",
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"Error in send_english_question: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑. /start"
        )

def get_english_menu() -> InlineKeyboardMarkup:
    """Create English learning menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá¨üáß –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É", callback_data="learn_english")],
        [InlineKeyboardButton(text="üìä –ú–µ–Ω—ñ“£ –ø—Ä–æ–≥—Ä–µ—Å—Å—ñ–º", callback_data="my_progress")]
    ])
    return keyboard

@dp.callback_query(lambda c: c.data == "learn_english")
async def process_learn_english(callback_query: CallbackQuery):
    """Handle English learning button click"""
    try:
        await callback_query.answer()
        await send_english_question(callback_query.from_user.id)
    except Exception as e:
        logger.error(f"Error in process_learn_english: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def process_answer(callback_query: CallbackQuery):
    """Handle answer selection"""
    try:
        user_id = callback_query.from_user.id
        _, question_id, selected_answer = callback_query.data.split("_")
        
        if user_id in user_progress and user_progress[user_id]["current_question"]:
            current_question = user_progress[user_id]["current_question"]
            
            if current_question["id"] == question_id:
                if selected_answer == current_question["correct"]:
                    user_progress[user_id]["correct_answers"] += 1
                    await callback_query.answer("üéâ –î“±—Ä—ã—Å! / Correct!")
                else:
                    await callback_query.answer(
                        f"‚ùå “ö–∞—Ç–µ! –î“±—Ä—ã—Å –∂–∞—É–∞–ø: {current_question['correct']}"
                    )
                
                user_progress[user_id]["questions_answered"] += 1
                
                # Send result message
                result_text = (
                    f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {user_progress[user_id]['correct_answers']}\n"
                    f"üìù –ë–∞—Ä–ª—ã“õ –∂–∞—É–∞–ø—Ç–∞—Ä: {user_progress[user_id]['questions_answered']}"
                )
                
                # Create keyboard for next question
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìö –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ", callback_data="learn_english")],
                    [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="main_menu")]
                ])
                
                await callback_query.message.answer(result_text, reply_markup=keyboard)
                
    except Exception as e:
        logger.error(f"Error in process_answer: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

@dp.callback_query(lambda c: c.data == "main_menu")
async def show_main_menu(callback_query: CallbackQuery):
    """Return to main menu"""
    try:
        await callback_query.answer()
        await callback_query.message.answer(
            "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:",
            reply_markup=get_english_menu()
        )
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")

@dp.callback_query(lambda c: c.data == "my_progress")
async def show_progress(callback_query: CallbackQuery):
    """Show user's learning progress"""
    try:
        user_id = callback_query.from_user.id
        
        if user_id in user_progress:
            correct = user_progress[user_id].get("correct_answers", 0)
            total = user_progress[user_id].get("questions_answered", 0)
            percentage = (correct / total * 100) if total > 0 else 0
            
            progress_text = (
                f"üìä –°—ñ–∑–¥—ñ“£ –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ“£—ñ–∑:\n\n"
                f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {correct}\n"
                f"üìù –ë–∞—Ä–ª—ã“õ –∂–∞—É–∞–ø—Ç–∞—Ä: {total}\n"
                f"üìà –ü–∞–π—ã–∑–¥—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à: {percentage:.1f}%"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="main_menu")]
            ])
            
            await callback_query.message.answer(progress_text, reply_markup=keyboard)
        else:
            await callback_query.answer(
                "–°—ñ–∑ ”ô–ª—ñ —Ç–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä“ì–∞–Ω –∂–æ“õ—Å—ã–∑.\n"
                "You haven't taken any tests yet."
            )
    except Exception as e:
        logger.error(f"Error in show_progress: {e}")
        await callback_query.message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

async def send_scheduled_message(chat_id: int, message: str):
    """Send scheduled message to user"""
    try:
        await bot.send_message(chat_id, message, reply_markup=get_english_menu())
        logger.info(f"Scheduled message sent to {chat_id}")
    except Exception as e:
        logger.error(f"Error sending scheduled message to {chat_id}: {e}")
        active_users.discard(chat_id)

async def morning_reminder(chat_id: int):
    """Send morning reminder"""
    message = random.choice(MORNING_MESSAGES)
    await send_scheduled_message(chat_id, message)

async def schedule_reminders(chat_id: int):
    """Schedule all reminders for a user"""
    try:
        # Schedule daily reminders
        scheduler.add_job(
            morning_reminder,
            'cron',
            hour=7,
            minute=0,
            args=[chat_id],
            id=f'morning_{chat_id}',
            replace_existing=True
        )
        
        # Schedule noon message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=12,
            minute=0,
            args=[chat_id, NOON_MESSAGE],
            id=f'noon_{chat_id}',
            replace_existing=True
        )
        
        # Schedule afternoon message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=16,
            minute=0,
            args=[chat_id, AFTERNOON_MESSAGE],
            id=f'afternoon_{chat_id}',
            replace_existing=True
        )
        # Schedule evening message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=20,
            minute=0,
            args=[chat_id, EVENING_MESSAGE],
            id=f'evening_{chat_id}',
            replace_existing=True
        )
        
        # Schedule salauat message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=14,
            minute=0,
            args=[chat_id, SALAUAT_MESSAGE],
            id=f'salauat_{chat_id}',
            replace_existing=True
        )
        
        # Schedule daily English questions
        for hour in [9, 13, 16, 21]:  # 4 times per day
            scheduler.add_job(
                send_english_question,
                'cron',
                hour=hour,
                minute=0,
                args=[chat_id],
                id=f'english_{hour}_{chat_id}',
                replace_existing=True
            )
        
        if not scheduler.running:
            scheduler.start()
        
        logger.info(f"Reminders scheduled for user {chat_id}")
    except Exception as e:
        logger.error(f"Error scheduling reminders for {chat_id}: {e}")

@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    try:
        user_id = message.from_user.id
        active_users.add(user_id)
        
        await message.answer(
            "–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º! üëã\n"
            "–ú–µ–Ω —Å—ñ–∑–¥—ñ“£ –∫”©–º–µ–∫—à—ñ“£—ñ–∑–±—ñ–Ω. –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ø, "
            "–∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∂–∞—Å–∞–π–º—ã–Ω!\n\n"
            "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –±–∞—Å—ã–ø, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω–µ –∞–ª–∞—Å—ã–∑!",
            reply_markup=get_english_menu()
        )
        
        await schedule_reminders(user_id)
        logger.info(f"New user started the bot: {user_id}")
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")

@dp.message()
async def handle_messages(message: Message):
    """Handle all incoming messages"""
    try:
        text = message.text.lower()
        if text in BASIC_RESPONSES:
            await message.answer(BASIC_RESPONSES[text], reply_markup=get_english_menu())
        else:
            await message.answer(
                "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Å—ñ–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. –ë–∞—Å“õ–∞—à–∞ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –∫”©—Ä—ñ“£—ñ–∑—à—ñ üòä",
                reply_markup=get_english_menu()
            )
    except Exception as e:
        logger.error(f"Error in handle_messages: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")

async def main():
    """Main function to run the bot"""
    try:
        logger.info("Starting bot...")
        # Delete webhook before polling
        await bot.delete_webhook(drop_pending_updates=True)
        # Start polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        # Proper cleanup
        await bot.session.close()
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
