import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from datetime import datetime
import pytz
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# Configuration
TELEGRAM_TOKEN = "7819420348:AAHElDNd7JI4c5gDbYD7TTe2kAWVn2TVZBo"
TIMEZONE = pytz.timezone('Asia/Almaty')

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# Scheduled messages
MORNING_MESSAGES = [
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω –µ—Ä–∫–µ–∫—Ç—ñ“£ —ã—Ä—ã—Å—ã –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ —Å”ô—Ç—Ç—ñ ”©—Ç—Å—ñ–Ω! üí™",
    "üåÖ –ï—Ä—Ç–µ —Ç“±—Ä“ì–∞–Ω ”ô–π–µ–ª–¥—ñ“£ –±—ñ—Ä —ñ—Å—ñ –∞—Ä—Ç—ã“õ! –ö“Ø–Ω—ñ“£—ñ–∑ –±–µ—Ä–µ–∫–µ–ª—ñ –±–æ–ª—Å—ã–Ω! ‚ú®"
]

NOON_MESSAGE = "üìö –ö—ñ—Ç–∞–ø –æ“õ—É —É–∞“õ—ã—Ç—ã –∫–µ–ª–¥—ñ! –ë—ñ–ª—ñ–º - —Ç–∞—É—Å—ã–ª–º–∞—Å “õ–∞–∑—ã–Ω–∞! üìñ"
AFTERNOON_MESSAGE = "üá¨üáß “ö–∞–ª–∞–π, –±–∞—É—ã—Ä—ã–º, –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ –∂–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ –∂–∞—Ç—Ç–∞–¥—ã“£ –±–∞? Remember - practice makes perfect! üòä"
EVENING_MESSAGE = "üìù –ö“Ø–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã! –ë“Ø–≥—ñ–Ω–≥—ñ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–ø –±—ñ—Ç—ñ—Ä–¥—ñ“£ –±–µ? Share your progress! üéØ"
SALAUAT_MESSAGE = "–ë“Ø–≥—ñ–Ω–≥—ñ —Å–∞–ª–∞—É–∞—Ç—Ç—ã “±–º—ã—Ç–ø–∞–π—ã“õ! –ê–ª–ª–∞—Ö—É–º–º–∞ —Å–æ–ª–ª–∏ '–∞–ª—è —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥–∏–Ω —É–∞ '–∞–ª—è –∞–ª–∏ —Å–∞–π–π–∏–¥–∏–Ω–∞ –ú—É—Ö–∞–º–º–∞–¥"

# Basic responses dictionary
BASIC_RESPONSES = {
    "—Å”ô–ª–µ–º": "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å–∞–ª–µ–º": "—Å–∞–ª–µ–º “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Å”ô–ª–µ–º “õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "“õ–∞–ª–∞–π—Å—ã“£": "–ê–ª—Ö–∞–º–¥—É–ª–∏–ª–ª–∞—Ö, –∂–∞“õ—Å—ã! ”®–∑—ñ“£—ñ–∑ “õ–∞–ª–∞–π—Å—ã–∑?",
    "—Ä–∞—Ö–º–µ—Ç": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üôè",
    "–∞—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º": "–£–∞“ì–∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! üòä “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π?",
    "–Ω–µ –∂–∞“£–∞–ª—ã“õ": "–∂–∞“£–∞–ª—ã“õ—Ç—ã —é—Ç—É–±—Ç–∞–Ω “õ–∞—Ä–∞—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã üôÉ",
    "“õ–∞–π—ã—Ä–ª—ã —Ç–∞“£": "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£, –±–∞—Ä—à–∞–º—ã–∑“ì–∞ “õ–∞–π—ã—Ä–ª—ã –∫“Ø–Ω –±–æ–ª—Å—ã–Ω! üí´",
    "–Ω–µ–≥–µ": "–±–∞–ª“ì–∞ –º–µ–Ω —à–µ–≥–µ üòÜ",
    "–∂–∞“õ—Å—ã–º—ã–Ω": "–∂–∞“õ—Å—ã –±–æ–ª—Å–∞“£ –º–µ–Ω–¥–µ –∂–∞“õ—Å—ã–º—ã–Ω –∞–π–Ω–∞–ª–∞–π—ã–Ω!üòÖ",
    "—Ç—ã–Ω—ã—à –æ—Ç—ã—Ä": "–∫–∞–∑—ñ—Ä –±–æ—Å –æ—Ç—ã—Ä–∞—Ç—ã–Ω –∑–∞–º–∞–Ω –µ–º–µ—Å üòâ",
    "–±–∞—É—ã—Ä—ã–º": "–±–∞—É—ã—Ä—ã–º —ñ—à—ñ–º–¥–µ–≥—ñ —Ç–∞—É—ñ—Ä—ñ–º –¥–∏—Å–Ω–≥–æ",
    "–ê–∞–∞": "–ê–∞–∞ –¥–µ–º–µ –¢“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –¥–µ",
    "–ê–∞": "–ê–∞ –¥–µ–º–µ –ê–∞–∞ –¥–µ–ø –∞–π—Ç",
    "–∂–∞“õ—Å—ã": "–µ–µ–µ —Å–æ–ª–∞–π –¥–µ",
    "–ö“Ø—à—Ç—ñ": "–ö“Ø—à—Ç—ñ –¥–µ–º–µ –∂–∞“õ—Å—ã –¥–µ",
    "Good morning": "”ò–Ω—ñ, –∞“ì—ã–ª—à—ã–Ω—à–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ –¥–∏–º",
    "üòÇ": "–∫“Ø–ª–º–µ –¥–æ—Å“õ–∞ –∫–µ–ª–µ—Ä –±–∞—Å“õ–∞ –¥–µ–π–¥—ñ üòå",
    "–ú–∞—à–∞–ê–ª–ª–∞“ª": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∏–º–∞–Ω–¥—ã—Å—ã“£ –∞–∞–∞?",
    "–º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã—Ö—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
    "–º—ã“õ—Ç—ã –º—ã“õ—Ç—ã": "—Ç—É—Ñ –Ω–µ –¥–µ–≥–µ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫–ø—ñ–Ω üòé",
}

# Store active users
active_users = set()

# Initialize scheduler
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    try:
        user_id = message.from_user.id
        active_users.add(user_id)
        
        await message.answer(
            "–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º! üëã\n"
            "–ú–µ–Ω —Å—ñ–∑–¥—ñ“£ –∫”©–º–µ–∫—à—ñ“£—ñ–∑–±—ñ–Ω. –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ø, "
            "–∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä –∂–∞—Å–∞–π–º—ã–Ω!\n\n"
            "–°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑–¥—ã “õ–æ—è –±–µ—Ä—ñ“£—ñ–∑ üòä"
        )
        
        await schedule_reminders(user_id)
        logger.info(f"New user started the bot: {user_id}")
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")

@dp.message()
async def handle_messages(message: Message):
    """Handle all incoming messages"""
    try:
        text = message.text.lower()
        if text in BASIC_RESPONSES:
            await message.answer(BASIC_RESPONSES[text])
        else:
            await message.answer("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Å—ñ–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. –ë–∞—Å“õ–∞—à–∞ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –∫”©—Ä—ñ“£—ñ–∑—à—ñ üòä")
    except Exception as e:
        logger.error(f"Error in handle_messages: {e}")
        await message.answer("“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ–Ω—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.")

async def send_scheduled_message(chat_id: int, message: str):
    """Send scheduled message to user"""
    try:
        await bot.send_message(chat_id, message)
        logger.info(f"Scheduled message sent to {chat_id}")
    except Exception as e:
        logger.error(f"Error sending scheduled message to {chat_id}: {e}")
        active_users.discard(chat_id)

async def morning_reminder(chat_id: int):
    """Send morning reminder"""
    message = MORNING_MESSAGES[0]  # You can add logic to determine gender
    await send_scheduled_message(chat_id, message)

async def schedule_reminders(chat_id: int):
    """Schedule all reminders for a user"""
    try:
        # Schedule daily reminders
        scheduler.add_job(
            morning_reminder,
            'cron',
            hour=7,
            minute=0,
            args=[chat_id],
            id=f'morning_{chat_id}',
            replace_existing=True
        )
        
        # Schedule noon message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=12,
            minute=0,
            args=[chat_id, NOON_MESSAGE],
            id=f'noon_{chat_id}',
            replace_existing=True
        )
        
        # Schedule afternoon message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=16,
            minute=0,
            args=[chat_id, AFTERNOON_MESSAGE],
            id=f'afternoon_{chat_id}',
            replace_existing=True
        )
        
        # Schedule evening message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=20,
            minute=0,
            args=[chat_id, EVENING_MESSAGE],
            id=f'evening_{chat_id}',
            replace_existing=True
        )
        
        # Schedule salauat message
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            hour=14,
            minute=0,
            args=[chat_id, SALAUAT_MESSAGE],
            id=f'salauat_{chat_id}',
            replace_existing=True
        )
        
        if not scheduler.running:
            scheduler.start()
        
        logger.info(f"Reminders scheduled for user {chat_id}")
    except Exception as e:
        logger.error(f"Error scheduling reminders for {chat_id}: {e}")

async def main():
    """Main function to run the bot"""
    try:
        logger.info("Starting bot...")
        # Delete webhook before polling
        await bot.delete_webhook(drop_pending_updates=True)
        # Start polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        # Proper cleanup
        await bot.session.close()
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
